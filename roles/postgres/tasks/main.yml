---
# tasks file for postgres

###Install Postgresql###
  - name: "Install prerequisites"
    yum:
      name: "python-psycopg2"
      state: "present"
      update_cache: "yes"

  - name: "Add Postgresql repo_key"
    rpm_key:
      state: present
      key: "https://apt.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG-12"

  - name: "Add Postgresql repo"
    yum:
      name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"

  - name: "Install  Postgresql"
    yum:
      name: "postgresql12-server"
      update_cache: yes
      state: present

#  - name: Creates directory
#    file:
#      path: /opt/data
#      state: directory
#      owner: postgres
#      group: postgres
#      mode: 0700
#
  - name: "Find out if PostgreSQL is initialized"
    ansible.builtin.stat:
      path: "{{ pg_data }}/pg_hba.conf"
    register: postgres_data

  - name: "Initialize PostgreSQL"
    shell: "postgresql-12-setup initdb postgresql-12 --encoding=UTF8"
    when: not postgres_data.stat.exists

  - name: "Start and enable services"
    service: "name={{ item }} state=started enabled=yes"
    with_items:
        - "{{ pg_service }}"
#  - name: Grant user postgres with Ansible host
#    postgresql_pg_hba:
#      dest: "{{ pg_data }}/pg_hba.conf"
#      contype: host
#      users: postgres
#      source: all
#      databases: all
#      method: trust
#      create: true


###Config PostgreSQL###

  - name: Set listen addresses parameter
    postgresql_set:
      name: listen_addresses
      value: '*'
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set work mem parameter
    postgresql_set:
      name: work_mem
      value: 32mb
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set max connection parameter
    postgresql_set:
      name: max_connections
      value: '1200'
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set effective cache size parameter
    postgresql_set:
      name: effective_cache_size
      value: 1536MB
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set shared buffers parameter
    postgresql_set:
      name: shared_buffers
      value: 512MB
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set max worker processes parameter
    postgresql_set:
      name: max_worker_processes
      value: '2'
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service

  - name: Set wal buffers parameter
    postgresql_set:
      name: wal_buffers
      value: 16MB
    register: set
    become:      yes
    become_user: postgres

  - name: Set max parallel workers parameter
    postgresql_set:
      name: max_parallel_workers
      value: '2'
    register: set
    become:      yes
    become_user: postgres
    notify: Restart service


###Add Roles for PostgreSQL###

  - name: Create user for test
    postgresql_user:
      db: postgres
      name: "{{ db_user }}"
      password: "{{ db_password }}"
      role_attr_flags: "SUPERUSER"
    become: yes
    become_user: postgres

#  - name: Remove User test
#    postgresql_user:
#      name: "{{ db_user }}"
#      state: absent
#    become: yes
#    become_user: postgres    

  - name: Add user in pg_hba.conf
    postgresql_pg_hba:
      dest: "{{ pg_data }}/pg_hba.conf"
      contype: host
      users: "{{ db_user }}"
      source: "{{ user_ip }}/32"
      databases: postgres
      method: md5

###Backup DB###
#
  - name: Backup directory    
    ansible.builtin.file:
      path: "{{ backup_dir }}"
      mode: 0700
      owner: postgres
      state: directory
      ### С этого таска и ниже  можно указать delegeta_to указав alias реплики из inventory тогда все что ниже применится к серверу реплики для снятия БЭКАПА все директории.

  - name: Scripts directory
    ansible.builtin.file:
     path: /opt/scripts/
     mode: 0700
     owner: postgres
     state: directory
     

  - name: Backup Postgresql with script and add cronjob
    template:
      src: backup_db.j2 
      dest: "{{ scripts_dir }}/backup_db.sh"
      mode: 0700
      owner: postgres
      

  - name: Backup Postgres 1 day of month"
    ansible.builtin.cron:
      name: "backup_db"
      minute: "0"
      hour: "1"
      day: "1"
      job: "{{ scripts_dir }}/backup_db.sh"
    become: yes
    become_user: postgres 


#  - name: Backup db
#    community.postgresql.postgresql_db:
#      state: dump
#      name: "{{ db_name }}"
#      target: "{{ backup_dir }}/{{ db_name }}-{{ ansible_date_time.date }}.gz"
#    become: true
#    become_user: postgres
